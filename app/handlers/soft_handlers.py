import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.database.queries import (get_my_account, get_user, save_session, 
                                  save_chat_base, get_my_bases, add_tastk)
from app.state.soft import AddBase, CreateTask

from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboard.soft_kb import soft_menu, generate_account_kb, soft_start

from telethon.errors import SessionPasswordNeededError, PasswordHashInvalidError
from app.state.admin_states import AddAccount
from opentele.tl import TelegramClient
from opentele.api import API


soft_handler = Router()

def create_client(session_name: str) -> TelegramClient:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏ —Å –∏–º–µ–Ω–µ–º '{–Ω–æ–º–µ—Ä}.session'."""
    return TelegramClient(
        session_name,
        API.TelegramDesktop.Generate(unique_id=session_name)
    )


def sanitize_session_name(raw_name: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏."""
    return re.sub(r'\W+', '', raw_name)


@soft_handler.callback_query(F.data == 'soft_panels')
@soft_handler.callback_query(F.data == 'back_profile_acc')
async def my_soft(call: CallbackQuery):
    await call.message.edit_caption(caption=(
      f"<b>üñ• Traffic –º–µ–Ω–µ–¥–∂–µ—Ä V1 - —Å–æ—Ñ—Ç \n\n</b>"
      f"<b>üì° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n</b>"
      f"<b>‚î£–ü–æ–¥–ø–∏—Å–∫–∞ :</b>\n"
      f"<b>‚î£–ó–∞–¥–∞—á –∞–∫—Ç–∏–≤–Ω—ã—Ö:</b> \n"  
      f"<b>‚î£–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∞–Ω–æ:</b> \n"
      f"<b>‚îó–ß–∞—Ç–æ–≤: </b>\n\n"
      f"<b>‚ùóÔ∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã </b>"
    ), reply_markup=soft_menu)
    
    
    
@soft_handler.callback_query(F.data == 'my_accounts')
async def my_account(call: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã, –µ—Å–ª–∏ None - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    accounts = await get_my_account(call.message.from_user.id) or []
    account_count = len(accounts)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

    # –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ get_user
    subscrib = await get_user(call.message.from_user.id)  # –î–æ–±–∞–≤–ª–µ–Ω–æ await –∑–¥–µ—Å—å
    subscription_info = subscrib.subscription if subscrib else "‚ùå –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω  "

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = generate_account_kb(account_count)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await call.message.edit_caption(
        caption=(
            f"<b>üñ• Traffic –º–µ–Ω–µ–¥–∂–µ—Ä V1 - —Å–æ—Ñ—Ç </b>\n\n"
            f"<b>üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: </b>\n"
            f"<b>‚î£üÜî –ú–æ–π ID: </b> <code>{call.from_user.id}</code> \n"
            f"<b>‚î£üì± –ù–æ–º–µ—Ä: </b> <code>{account_count}</code>\n"
            f"<b>‚îóüìÖ–ü–æ–¥–ø–∏—Å–∫–∞: </b> <code>{subscription_info}</code> \n"
        ),
        reply_markup=keyboard
    )

@soft_handler.callback_query(F.data == 'add_account')
async def add_user_account(call: CallbackQuery, state: FSMContext):
    await state.set_state(AddAccount.phone)
    await call.message.answer('<b>üì≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ </b>')
    

@soft_handler.message(AddAccount.phone)
async def add_phone(message: Message, state: FSMContext):
    phone_number = message.text.strip()
    await state.update_data(phone=message.text)

    session_name = sanitize_session_name(f"{phone_number}")
    client = create_client(session_name)
    
    await client.connect()
    
    try:
        send_code = await client.send_code_request(phone_number)
        await state.update_data(phone_code_hash=send_code.phone_code_hash)
        await state.set_state(AddAccount.code)
            
        await save_session(message.from_user.id, session_name, phone_number)
        
        
        await message.answer('<b>üì© –í–≤–µ–¥–∏—Ç–µ –°–ú–° </b>')
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        
        
@soft_handler.message(AddAccount.code)
async def add_code(message: Message, state: FSMContext):
    account = await state.get_data()
    code = message.text.strip()
    phone = account['phone']
    
    user = await get_my_account(message.from_user.id)
    
    client = create_client(user.session_name)
    await client.connect()
    
    phone_code_hash = account.get('phone_code_hash')
    
    try:
        await client.sign_in(
            phone=phone, 
            code=code, 
            phone_code_hash=phone_code_hash
        )
        await message.answer('<b>‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>')
        await state.clear()
    except SessionPasswordNeededError:
        await message.answer('<b>üîê –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–ª—å –æ—Ç 2FA</b>')
        await state.set_state(AddAccount.password)
        

@soft_handler.message(AddAccount.password)
async def add_password(message: Message, state: FSMContext):
    password = message.text
    
    user = await get_my_account(message.from_user.id)
    client = create_client(user.session_name)
    
    await client.connect()
    
    try:
        await client.sign_in(password=password)
        await message.answer('<i>‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</i>')
        await state.clear()
    except PasswordHashInvalidError:
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        await state.set_state(AddAccount.password)

    

@soft_handler.callback_query(F.data == 'my_base')
async def add_base(call: CallbackQuery, state: FSMContext):
    await state.set_state(AddBase.name_base)
    await call.message.answer('<b>‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã</b>')
    

@soft_handler.message(AddBase.name_base)
async def add_my_base(message: Message, state: FSMContext):
    await state.update_data(name_base=message.text)
    await state.set_state(AddBase.chat_link)
    
    await message.answer('<b>üìñ –ü—Ä–∏—à–ª–∏—Ç–µ –±–∞–∑—É —á–∞—Ç–æ–≤ –∫–∞–∂–¥—É—é —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É </b>')
    
    
@soft_handler.message(AddBase.chat_link)
async def add_chat_link(message: Message, state: FSMContext):
    await state.update_data(chat_link=message.text)
    data = await state.get_data()
    name_base = data.get('name_base')
    
    chat_links = message.text.splitlines()
    
    for link in chat_links:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –±–∞–∑—É —á–∞—Ç–æ–≤
        await save_chat_base(message.from_user.id, name_base, link.strip())
        
    await message.answer('<b>‚úÖ –ë–∞–∑—ã —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>')
    await state.clear() 
    
    
# –†–∞—Å—Å—ã–ª–∫–∞ 

@soft_handler.callback_query(F.data == 'create_task')
async def add_task(call: CallbackQuery, state: FSMContext):
    await state.set_state(CreateTask.name_task)
    await call.message.answer('<b>‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>')
    
    

def create_inline_keyboard(bases: list):
    keyboard = InlineKeyboardBuilder()
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–∑—ã
    unique_bases = {base.name_base for base in bases}  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    for name in unique_bases:
        button = InlineKeyboardButton(text=name, callback_data=f"select_base_{name}")
        keyboard.add(button)
    return keyboard.adjust(1).as_markup()


@soft_handler.message(CreateTask.name_task)
async def add_name_task(message: Message, state: FSMContext):
    await state.update_data(name_task=message.text)
    await state.set_state(CreateTask.name_base)

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bases = await get_my_bases(message.from_user.id)
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = create_inline_keyboard(bases)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É:", reply_markup=keyboard)
    
    
@soft_handler.callback_query(CreateTask.name_base)
async def add_bases(call: CallbackQuery, state: FSMContext):
    await state.update_data(name_base=call.data.split('_')[2])
    await state.set_state(CreateTask.interval_sms)
    
    await call.message.answer('<b>‚è∞ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏ </b>')
    

@soft_handler.message(CreateTask.interval_sms)
async def add_interval(message: Message, state: FSMContext):
   await state.update_data(interval_sms=message.text)
   await state.set_state(CreateTask.text_sms)
   
   await message.answer('<b>üì§ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç </b>')


@soft_handler.message(CreateTask.text_sms)
async def add_text_sms(message: Message, state: FSMContext):
    await state.update_data(text_sms=message.text)
    await state.set_state(CreateTask.flow)
    
    await message.answer('<b>üîÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ </b>')
    

@soft_handler.message(CreateTask.flow)
async def add_flow(message: Message, state: FSMContext):
    await state.update_data(flow=message.text)
    data = await state.get_data()
    
    await add_tastk(message.from_user.id, data['name_task'], data['name_base'], data['text_sms'], data['flow'], data['interval_sms'],)
    
    await state.clear()
    
    await message.answer('<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã </b>', reply_markup=soft_start)
    
    

    